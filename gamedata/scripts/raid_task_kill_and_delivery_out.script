local gt = game.translate_string
local ltx = ini_file("misc\\task\\tm_raid_tasks.ltx")
local ctime_to_t = utils_data.CTime_to_table
local t_to_ctime = utils_data.CTime_from_table

local delivery_sec_t = {		-- item indices
	["in"] = { 1, 2, 3, 4, 5 },
	["out"] = { 6, 7, 8, 9, 10, 11 },
}


-- ============================================
-- ================ (1) Kill Stalker =================
-- ============================================
task_functor.raid_task_kill_stalker_and_delivery_out_target_functor = function(task_id,field,p,tsk)
	local active_t = raid_tasks_main.raid_active_tasks
	local stage = tsk and tsk.stage

	if (field == "title") then
		return raid_utils.get_raid_task_title(task_id, stage, 9)
	elseif (field == "descr") then
		return raid_utils.get_raid_task_descr(task_id, stage, 9)
	elseif (field == "target") and stage and stage > 0 and active_t[task_id] then
		if stage == 2 then
			local se_obj = alife_object(active_t[task_id].stalker_id)
			return se_obj and se_obj.alive and se_obj:alive() and se_obj.id
		end
		if tsk.stage == 5 then
			return active_t[task_id].pick_up_item_id
		end
        if (tsk.stage == 7 or tsk.stage == 8) then
			return active_t[task_id].item_id
		end
	end
end

task_status_functor.raid_task_kill_stalker_and_delivery_out_status_functor = function(tsk,task_id)
	local active_t = raid_tasks_main.raid_active_tasks
	local cur_time = game.get_game_time()
	local task_data = raid_tasks_main.get_task_data(task_id)
	if not (task_data and tsk) then return end

	if not tsk.stage then
		tsk.stage = 0
	end

	if tsk.stage > 0 and not active_t[task_id] then
		return
	end

--[[
	0 = setup
	1 = spawn
	2 = watch when killed
	3 = killed
	4 = spawn item to lean info

	5 = take item to learn info

    delivery
    6 = setspawn item (0)
	7 = taking process (1)
	8 = quest item dropped (2)
	9 = taken (3)

--]]

	-- setup
	if tsk.stage == 0 then
		active_t[task_id] = {}

		-- store level name
		active_t[task_id].level_name = task_data.level_name

		-- get squad section
		local sec = task_data.kill_stalker_squad_sec
		active_t[task_id].squad_sec = sec

		-- store non-busy and viable smart id
		local all_smarts_t = raid_utils.find_random_smart(task_data.level_name, true, "all")
		local comm = ini_sys:r_string_ex(sec, "faction")
		local smart = raid_utils.find_viable_smart(all_smarts_t, comm)
		local smart_id = smart.id
		active_t[task_id].smart_id = smart_id

		-- add smart id to busy smarts
		raid_tasks_main.raid_busy_smarts_t[smart_id] = true

		-- killed_by field
		active_t[task_id].killed_by_actor = false

		-- set timer
		active_t[task_id].start_time = ctime_to_t(cur_time)

		tsk.stage = 1
		return
	end


	-- spawn
	if tsk.stage == 1 and level.name() == active_t[task_id].level_name then
		local squad = raid_simulation.spawn_raid_sim_squad(active_t[task_id].smart_id, active_t[task_id].squad_sec)

		-- store commander id as a target and squad id for release
		if squad and squad.commander_id and squad:commander_id() then
			active_t[task_id].squad_id = squad.id
			active_t[task_id].stalker_id = squad:commander_id()
			active_t[task_id].stalker_killed = false
		end

		tsk.stage = 2
		return
	end


	-- if killed by someone else
	if tsk.stage == 2 and active_t[task_id].stalker_killed and (not active_t[task_id].killed_by_actor) then
		raid_tasks_main.end_raid_task(task_id, "cancel")
		return
	end

	-- if killed by us
	if tsk.stage == 2 and active_t[task_id].killed_by_actor then
		tsk.stage = 3
	end

	-- fail on return without killing
	if tsk.stage >= 2 and tsk.stage < 6 and level.name() == raid_utils.raid_home_level then
		raid_tasks_main.end_raid_task(task_id, "fail")
		return
	end

	-- complete
	if tsk.stage == 3 then
		local str = strformat(gt("kill_stalker_and_delivery_out_task_update_1"), ui_options.curr_player_name())
		news_manager.send_tip(db.actor, str, 3, nil, 5000)

		tsk.stage = 4
		return
	end

	-- spawn item in dead body to knew information about stash
	if tsk.stage == 4 then

		-- select pda is target and store dead_body id
		local item_sec = "raid_delivery_item_" .. 8
		local se_stash = alife_object(active_t[task_id].stalker_id)

		if not se_stash then
			return
		end

		local item = alife_create_item(item_sec, se_stash)
		active_t[task_id].pick_up_item_id = item and item.id or "No item ID"

		tsk.stage = 5
		return		-- next update just in case
	end

	if tsk.stage == 5 then 
		local item = alife_object(active_t[task_id].pick_up_item_id)
		if item and item.parent_id and item.parent_id == 0 then
			local str = strformat(gt("kill_stalker_and_delivery_out_task_update_2"))
			news_manager.send_tip(db.actor, str, 3, nil, 5000)
			tsk.stage = 6
		end
	end




	-- setup delivery
	if tsk.stage == 6 then
		-- release item
		local item = alife_object(active_t[task_id].pick_up_item_id)
		alife_release(item)
		active_t[task_id].pick_up_item_id = nil

		-- store level and stash
		active_t[task_id].level_name = task_data.level_name
		active_t[task_id].stash_id = raid_utils.find_random_stash(task_data.level_name, true) or "No stash id"
		raid_tasks_main.raid_busy_stashes_t[active_t[task_id].stash_id] = true

		-- spawn item in stash and store its id
		local itm_ar = delivery_sec_t["out"]
		local item_sec = "raid_delivery_item_" .. itm_ar[math.random(1, #itm_ar)]
		local se_stash = alife_object(active_t[task_id].stash_id)

		local item = alife_create_item(item_sec, se_stash)
		-- active_t[task_id].item_sec = item_sec
		active_t[task_id].item_id = item and item.id or "No item ID"

		tsk.stage = 7
		return		-- next update just in case
	end

	-- item taken delivery
	if tsk.stage == 7 or tsk.stage == 8 then
		local item = alife_object(active_t[task_id].item_id)
		if item and item.parent_id and item.parent_id == 0 then
			tsk.stage = 9
		end
	end

	-- item dropped delivery
	if tsk.stage == 9 then
		local item = alife_object(active_t[task_id].item_id)
		if item and item.parent_id and item.parent_id ~= 0 then
			tsk.stage = 8
		end
	end


	-- complete delivery
	if tsk.stage == 9 then
		if level.name() == raid_utils.raid_home_level then
			raid_tasks_main.end_raid_task(task_id, "complete")
		end
		return
	end

	-- fail on timer
	if task_data.urgent < 10 then
		local hours = raid_tables.raid_urgency_time[task_data.urgent]
		if cur_time:diffSec(t_to_ctime(active_t[task_id].start_time)) > (hours * 3600) then
			raid_tasks_main.end_raid_task(task_id, "fail")
			return
		end
	end

end

